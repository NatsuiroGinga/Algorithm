/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

func isSymmetric(root *TreeNode) bool {
	if root == nil {
		return true
	}
	//return IsMirror(root.Left, root.Right)
	return isMirror(root)
}

func isMirror(root *TreeNode) bool {
	stack := make([]*TreeNode, 0)

	if root.Left != nil && root.Right == nil {
		return false
	} else if root.Left == nil && root.Right != nil {
		return false
	} else if root.Left != nil && root.Right != nil {
		stack = append(stack, root.Left)
		stack = append(stack, root.Right)
	}

	for len(stack) > 0 {
		left := stack[len(stack)-1]
		stack = stack[:len(stack)-1]

		right := stack[len(stack)-1]
		stack = stack[:len(stack)-1]

		if len(stack)%2 != 0 || left.Val != right.Val {
			return false
		}

		if left.Left != nil && right.Right == nil {
			return false
		} else if left.Left == nil && right.Right != nil {
			return false
		} else if left.Left != nil && right.Right != nil {
			stack = append(stack, left.Left)
			stack = append(stack, right.Right)
		}

		if left.Right != nil && right.Left == nil {
			return false
		} else if left.Right == nil && right.Left != nil {
			return false
		} else if left.Right != nil && right.Left != nil {
			stack = append(stack, left.Right)
			stack = append(stack, right.Left)
		}
	}

	return true
}


//runtime:2 ms
//memory:2.9 MB
